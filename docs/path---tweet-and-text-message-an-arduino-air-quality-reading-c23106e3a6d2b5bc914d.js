webpackJsonp([0xe2d180547875],{450:function(n,s){n.exports={data:{markdownRemark:{html:'<p><strong>This little app tweets and texts notifications to your phone from a Node.js server when the Arduino air quality sensor detects high levels of natural gasses which we normally associate with bad smell.</strong></p>\n<p><img src="http://www.webondevices.com/posts/mq2.jpg" alt="Talking arduino plant with sensors"></p>\n<p>I used the cheap MQ-2 natural gas sensor I bought from eBay. It’s sensitive to Methane, Butane, LPG, smoke and many other flammable or combustible gasses. It’s really easy to connect the sensor to the Arduino: first we need to power it up from the board so we connect it to the 5V and GND pins then its analog output pin to the analog input pin on the Arduino (A0).</p>\n<p>The sensor reading is then sent to the serial port (USB) for the Node.js server once every second.</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code class="language-c"><span class="token comment">// Arduino code to read sensor and send through the USB</span>\n\n<span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">analogRead</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>This message coming through the USB port from the Arduino is something we wouldn’t be able to read from a regular browser. Due to security reasons this is only available for the server which is why we use Node.js along with the serial library. I did something very similar with my <a href="/arduino-nodejs-rc-car-driven-with-html5-gamepad-api">Arduino RC Car</a>\nso have a look for the serial communication logic there.</p>\n<h3 id="tweeting-from-javascript"><a href="#tweeting-from-javascript" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tweeting from JavaScript</h3>\n<p>First we need to load the Twitter node library in our server javascript file then initialise it with the unique keys and tokens:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// Initialising the Twitter API</span>\n\n<span class="token keyword">var</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Twit</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    consumer_key<span class="token operator">:</span>         <span class="token string">\'xyz123\'</span>\n  <span class="token punctuation">,</span> consumer_secret<span class="token operator">:</span>      <span class="token string">\'xyz123\'</span>\n  <span class="token punctuation">,</span> access_token<span class="token operator">:</span>         <span class="token string">\'xyz123\'</span>\n  <span class="token punctuation">,</span> access_token_secret<span class="token operator">:</span>  <span class="token string">\'xyz123\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Once it’s initialised you can tweet with the T.post() command:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// Tweeting from Node.js</span>\n\n<span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">\'statuses/update\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> status<span class="token operator">:</span> <span class="token string">"The air quality in your room is"</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">""</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h3 id="texting-from-javascript"><a href="#texting-from-javascript" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Texting from JavaScript</h3>\n<p>For text messages to your phone we use <a href="https://www.twilio.com/docs/node/install">Twilio</a>. Twilio also needs to be initialised with the tokens before using it:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// Initialising the Twilio API</span>\n\n<span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'twilio\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">\'xy\'</span><span class="token punctuation">,</span> <span class="token string">\'yz\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>After this you can easily send text messages to any mobile number with the <code class="language-text">sms.messages.post()</code> method:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// Texting from Node.js</span>\n\nclient<span class="token punctuation">.</span>sms<span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    to<span class="token operator">:</span> <span class="token string">\'+44xxx\'</span><span class="token punctuation">,</span>\n    <span class="token keyword">from</span><span class="token operator">:</span><span class="token string">\'+44xxx\'</span><span class="token punctuation">,</span>\n    body<span class="token operator">:</span><span class="token string">"The air quality in the office is"</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">""</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Current status of this text message is: \'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>This project shows a lot of potential. You can see that as soon as the sensor reading arrives in Node.js the possibilities are infinite. You can start saving these values into a database or a google spreadsheet or simply send it to the browser through web sockets and the socketIO library. The air quality sensor could also be swapped out to any other analog sensor like temperature, light or sound without modifying the code.</p>',timeToRead:2,excerpt:"This little app tweets and texts notifications to your phone from a Node.js server when the Arduino air quality sensor detects high levels…",frontmatter:{title:"Tweet and Text Message an Arduino air quality reading",cover:"http://www.webondevices.com/posts/mq.jpg",date:"03/07/2015",category:"moar",tags:["arduino","javascript"]},fields:{slug:"/tweet-and-text-message-an-arduino-air-quality-reading"}}},pathContext:{slug:"/tweet-and-text-message-an-arduino-air-quality-reading"}}}});
//# sourceMappingURL=path---tweet-and-text-message-an-arduino-air-quality-reading-c23106e3a6d2b5bc914d.js.map