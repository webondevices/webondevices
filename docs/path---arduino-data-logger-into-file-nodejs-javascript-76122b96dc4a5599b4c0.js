webpackJsonp([0xd7ed81429c88],{423:function(n,s){n.exports={data:{markdownRemark:{html:'<p><strong>Measurements received from Arduino sensors often end up in serial monitors and consoles lost forever as they are not saved anywhere.</strong></p>\n<p><strong>What\'s the point of measuring if we can\'t look back in history or trigger notifications on the data. Let\'s take one step further and save this data on our computer first then in the cloud using Amazon Web Services (AWS) (post coming up next week).</strong></p>\n<p><a class="youtube-video" href="https://www.youtube.com/embed/8zLqPDdng9o" target="_blank">Click to see Youtube video</a></p>\n<p>You can find the source code of this project here on Github:</p>\n<ul>\n<li><a href="https://github.com/webondevices/example-projects/tree/master/temp-log-simple">Temperature log, simple</a></li>\n<li><a href="https://github.com/webondevices/example-projects/tree/master/temp-log-csv">Temperature log, CSV</a></li>\n<li><a href="https://github.com/webondevices/js-electronics-book/tree/master/11-smart-plant-log-chart">Bit more complex example project from the JavaScript Electronics book, logging data into JSON</a></li>\n</ul>\n<h3 id="reading-a-temperature-sensor"><a href="#reading-a-temperature-sensor" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Reading a temperature sensor</h3>\n<p>To get some sensor measurements we will use an Arduino UNO and read the temperature and humidity values from a DHT22 sensor which is one of the more accurate sensors you can buy.</p>\n<p><img src="http://www.webondevices.com/posts/2018/dht22-arduino-sensor.jpg" alt="DHT22 arduino sensor"></p>\n<p>Wiring this sensor up is quite simple: we first connect it to the 5V and GND pins, then the data pin (DAT) to a digital pin of your choice. I picked D12. Check the video out for reference.</p>\n<p>To read this sensor we will need to add this piece of Arduino code into the IDE after installing the DHT library. If you need help installing the IDE and uploading code to the Arduino, have a look at my <a href="#subscription">free ebook</a> to get you started.</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"DHT.h"</span></span>\n\n<span class="token comment">// DHT22 DAT pin </span>\n<span class="token macro property">#<span class="token directive keyword">define</span> DHTPIN 12</span>\n\n<span class="token comment">// Type of DHT sensor</span>\n<span class="token macro property">#<span class="token directive keyword">define</span> DHTTYPE DHT22</span>\n\nDHT <span class="token function">dht</span><span class="token punctuation">(</span>DHTPIN<span class="token punctuation">,</span> DHTTYPE<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  dht<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">float</span> h <span class="token operator">=</span> dht<span class="token punctuation">.</span><span class="token function">readHumidity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">float</span> t <span class="token operator">=</span> dht<span class="token punctuation">.</span><span class="token function">readTemperature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  String message <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isnan</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isnan</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  message <span class="token operator">=</span> h <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> t<span class="token punctuation">;</span>\n\n  <span class="token comment">// Send message</span>\n  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>What we did here first is initialised the DHT library with the necessary settings. If you connected your sensor to a different pin, change <code class="language-text">#define DHTPIN 12</code> to a different number. If you use the more common, blue DHT11 sensor, change this line: <code class="language-text">#define DHTTYPE DHT22</code> to this <code class="language-text">#define DHTTYPE DHT11</code>.</p>\n<p>In the loop function of the sketch we first save the temperature and humidity readings we retrieved from the DHT library to a variable.</p>\n<h3 id="arduino-serial-write"><a href="#arduino-serial-write" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Arduino Serial Write</h3>\n<p>After a simple error handling and some string concatenation, we are ready to <strong>pass the reading through via the USB serial port to the serial monitor</strong>.</p>\n<p>Upload the code onto the Arduino and open up the serial monitor in the Arduino IDE. You should now start seeing sensor readings appearing every other second in the monitor window!</p>\n<h3 id="receiving-the-message-with-nodejs"><a href="#receiving-the-message-with-nodejs" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Receiving the message with Node.js</h3>\n<p>The <code class="language-text">Serial.println(message)</code> command in the Arduino sketch sends the message to the available serial connection. By default, this is the USB port you connected the Arduino to, but it could be a wireless serial connection via bluetooth as well.</p>\n<p>The cool thing about Node.js is that, unlike your JavaScript code running in the browser, you have access to the USB ports and read these incoming messages.</p>\n<p><img src="http://www.webondevices.com/posts/2018/temperature-logging.jpg" alt="DHT22 arduino sensor logging circuit"></p>\n<p>Let\'s create a new folder and initialise a new Node application with the <code class="language-text">npm init</code> command in the command line prompt. For this command to work, you will need <a href="https://nodejs.org/en/download/">NPM and Node.js</a> installed on your computer\'s command line (Terminal on Mac, Command Prompt on Windows).</p>\n<p>Once the initialisation has completed, create a new temp-log.js file and add this piece of code to connect to the USB port:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> SerialPort <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'serialport\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Add your USB port name</span>\n<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SerialPort</span><span class="token punctuation">(</span><span class="token string">\'/xyz\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\tparser<span class="token operator">:</span> SerialPort<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span><span class="token function">readline</span><span class="token punctuation">(</span><span class="token string">\'\\n\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nport<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">\'open\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Opened port...\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Before testing this code let\'s first install the serialport library: <code class="language-text">npm install --save serialport</code>.</p>\n<p>Let\'s also review what\'s happening in this javascript file: in the first line we load the serialport library, then initilise the port by passing in some settings, so here make sure you replace "/xyz" with the name of the USB port you connected the Arduino to. You can easily find the name in the Arduino IDE under the port menu:</p>\n<p><img src="http://www.webondevices.com/posts/2018/arduino-port.jpg" alt="arduino port selection"></p>\n<p>The final piece of code we added was an event listener that will fire as soon as the connection to the port is established.</p>\n<p>To test this save the file, connect your Arduino and run <code class="language-text">node temp-log.js</code>. You should see the "Opened port..." message appearing after a couple of seconds.</p>\n<p>This is great, but we are missing the most important part of the application and that is <strong>capturing the incoming messages</strong> on the port we are now connected to. Let\'s extend the original event listener with a new one nested inside:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript">port<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">\'open\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Opened port...\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\tport<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">\'data\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>After saving and re-testing this, the app will read our sensor measurements from the Arduino and output them to the console.</p>\n<h3 id="changing-the-data-type-to-json"><a href="#changing-the-data-type-to-json" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Changing the data type to JSON</h3>\n<p>At this point we could start manipulating the string to extract the data from the message but it would be much easier if the data was coming through in JSON format already as we could very easily parse that into a javascript object. </p>\n<p>To achieve this, we will format the data to JSON in the Arduino sketch. Here\'s how the loop function changes:</p>\n<div class="gatsby-highlight">\n      <pre class="language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">float</span> h <span class="token operator">=</span> dht<span class="token punctuation">.</span><span class="token function">readHumidity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">float</span> t <span class="token operator">=</span> dht<span class="token punctuation">.</span><span class="token function">readTemperature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  String message <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isnan</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isnan</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// Create JSON as a message</span>\n  message <span class="token operator">=</span> message <span class="token operator">+</span> <span class="token string">"{\\"humidity\\": "</span><span class="token punctuation">;</span>\n  message <span class="token operator">=</span> message <span class="token operator">+</span> h<span class="token punctuation">;</span>\n  message <span class="token operator">=</span> message <span class="token operator">+</span> <span class="token string">", \\"temperature\\": "</span><span class="token punctuation">;</span>\n  message <span class="token operator">=</span> message <span class="token operator">+</span> t<span class="token punctuation">;</span>\n  message <span class="token operator">=</span> message <span class="token operator">+</span> <span class="token string">"}"</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Send message</span>\n  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>As you probably noticed, this still is just a string, but since it now contains JSON formatted text, we can use <code class="language-text">JSON.parse()</code> in Node.js to parse it to an object:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">tryParseJson</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nport<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">\'open\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Opened port...\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\tport<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">\'data\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">const</span> sensorData <span class="token operator">=</span> <span class="token function">tryParseJson</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sensorData<span class="token punctuation">.</span>humidity<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sensorData<span class="token punctuation">.</span>temperature<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>This is a much better approach and will be much easier to work with! I added the additional <code class="language-text">tryParseJson()</code> function to wrap the <code class="language-text">JSON.parse()</code> call into some error handling in case the incoming message is not formatted correctly.</p>\n<h3 id="data-logging-with-timestamp"><a href="#data-logging-with-timestamp" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Data logging with timestamp</h3>\n<p>Finally, let\'s save this piece of data in CSV format into a new txt file. Using Nodes built in fs (file system) library, this is how you can save something into a file:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript">fs<span class="token punctuation">.</span><span class="token function">appendFile</span><span class="token punctuation">(</span><span class="token string">\'log.txt\'</span><span class="token punctuation">,</span> <span class="token string">\'hello\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\'Logged the word hello into a <span class="token keyword">new</span> <span class="token class-name">txt</span> file<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>In the final version of the Node.js script, I added a timer that only saves the data every 5 minutes. For testing, change this variable to, say, 0.1. In that case you will only have to wait 6 seconds for a new entry to appear.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> SerialPort <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'serialport\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Add your USB port name</span>\n<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SerialPort</span><span class="token punctuation">(</span><span class="token string">\'/dev/xy\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\tparser<span class="token operator">:</span> SerialPort<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span><span class="token function">readline</span><span class="token punctuation">(</span><span class="token string">\'\\n\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> logIntervalMinutes <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> lastMoment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">tryParseJson</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Initialising...\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nport<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">\'open\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Opened port...\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\tport<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">\'data\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">const</span> sensorData <span class="token operator">=</span> <span class="token function">tryParseJson</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">const</span> moment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>moment<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> lastMoment<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> logIntervalMinutes <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\tlastMoment <span class="token operator">=</span> moment<span class="token punctuation">;</span>\n\n\t\t\tfs<span class="token punctuation">.</span><span class="token function">appendFile</span><span class="token punctuation">(</span><span class="token string">\'log.txt\'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sensorData<span class="token punctuation">.</span>temperature<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> , </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sensorData<span class="token punctuation">.</span>humidity<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> , </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>moment<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Logged data: \'</span><span class="token punctuation">,</span> moment<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>In the <a href="#subscription">JavaScript Electronics book</a> the Smart Talking Plant example project logs the data in JSON format which allows you to then later read it and parse it back to a JavaScript object. The book explains this is in much greater detail, but more advanced users can browse the source code on Github:\n<a href="https://github.com/webondevices/js-electronics-book/blob/master/11-smart-plant-log-chart/server.js">https://github.com/webondevices/js-electronics-book/blob/master/11-smart-plant-log-chart/server.js</a></p>\n<p><img src="http://www.webondevices.com/posts/2018/data-logging.jpg" alt="DHT22 arduino sensor"></p>\n<p>Next week, we will get started with Amazon Web Services and save this data into DynamoDB, the NoSQL cloud database service of AWS.</p>',
timeToRead:6,excerpt:"Measurements received from Arduino sensors often end up in serial monitors and consoles lost forever as they are not saved anywhere. What's…",frontmatter:{title:"Arduino Data Logger 1, save to Text File with Node.js and JavaScript",cover:"http://www.webondevices.com/posts/2018/dht22-arduino-sensor.jpg",date:"10/04/2018",category:"moar",tags:["arduino","javascript"]},fields:{slug:"/arduino-data-logger-1-save-to-text-file-with-node-js-and-java-script"}}},pathContext:{slug:"/arduino-data-logger-1-save-to-text-file-with-node-js-and-java-script"}}}});
//# sourceMappingURL=path---arduino-data-logger-into-file-nodejs-javascript-76122b96dc4a5599b4c0.js.map